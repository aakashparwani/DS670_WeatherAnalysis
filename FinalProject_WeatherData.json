{"paragraphs":[{"text":"import org.apache.spark.sql.functions._\r\nimport org.joda.time.format.DateTimeFormat\r\nimport org.apache.commons.io.IOUtils\r\nimport java.net.URL\r\nimport java.nio.charset.Charset","dateUpdated":"2017-01-29T16:16:25-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485579378654_630525571","id":"20170127-235618_1208065208","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.sql.functions._\n\nimport org.joda.time.format.DateTimeFormat\n\nimport org.apache.commons.io.IOUtils\n\nimport java.net.URL\n\nimport java.nio.charset.Charset\n"},"dateCreated":"2017-01-27T11:56:18-0500","dateStarted":"2017-01-29T16:16:25-0500","dateFinished":"2017-01-29T16:16:28-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2966","focus":true},{"text":"// load aarhus city data - store different parameters in different variables\r\n\r\n//define path for reading the json format file\r\nval inputPath =  \"D:/Aakash_Documents/MS_Collections/AcceptanceFromSaintPeters/ClassStuff/DS_670_Capstone/FinalProject_WeatherReport/dataset/raw_weather_data_aarhus\"\r\n\r\n//read dewpoint weather parameter\r\nval dewpoint_feb_jun = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/dewpoint/dewptm_Feb_Jun.csv\")\r\n\r\nval dewpoint_aug_sep = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/dewpoint/dewptm_Aug_Sep.csv\")\r\n        \r\n//read humidity weather parameter\r\nval humidity_feb_jun = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/humidity/hum_feb_jun.csv\")\r\n\r\nval humidity_aug_sep = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/humidity/hum_aug_sep.csv\")\r\n        \r\n//read pressure weather parameter\r\nval pressure_feb_jun = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/pressure/pressurem_feb_jun.csv\")\r\n\r\nval pressure_aug_sep = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/pressure/pressurem_aug_sept.csv\")\r\n        \r\n//read temperature weather parameter\r\nval temp_feb_jun = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/temperature/tempm_feb_jun.csv\")\r\n\r\nval temp_aug_sep = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/temperature/tempm_aug_sept.csv\")\r\n\r\n//read wind direction weather parameter\r\nval winddirection_feb_jun = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/winddirection/wdird_feb_jun.csv\")\r\n\r\nval winddirection_aug_sep = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/winddirection/wdird_aug_sept.csv\")\r\n\r\n//read wind speed weather parameter\r\nval windspeed_feb_jun = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/windspeed/wspdm_feb_jun.csv\")\r\n\r\nval windspeed_aug_sep = sqlContext.read\r\n        .format(\"com.databricks.spark.csv\")\r\n        .option(\"header\", \"true\") // Use first line of all files as header\r\n        .option(\"delimiter\", \",\")\r\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\r\n        .load(inputPath+\"/windspeed/wspdm_aug_sept.csv\")","dateUpdated":"2017-01-29T16:16:30-0500","config":{"colWidth":12,"graph":{"mode":"table","height":86,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485579415781_1739048449","id":"20170127-235655_2040355342","result":{"code":"SUCCESS","type":"TEXT","msg":"\ninputPath: String = D:/Aakash_Documents/MS_Collections/AcceptanceFromSaintPeters/ClassStuff/DS_670_Capstone/FinalProject_WeatherReport/dataset/raw_weather_data_aarhus\n\ndewpoint_feb_jun: org.apache.spark.sql.DataFrame = [DateTime: timestamp, DewPoint: int]\n\ndewpoint_aug_sep: org.apache.spark.sql.DataFrame = [DateTime: timestamp, DewPoint: int]\n\nhumidity_feb_jun: org.apache.spark.sql.DataFrame = [DateTime: timestamp, Humidity: int]\n\nhumidity_aug_sep: org.apache.spark.sql.DataFrame = [DateTime: timestamp, Humidity: int]\n\npressure_feb_jun: org.apache.spark.sql.DataFrame = [DateTime: timestamp, Pressure: int]\n\npressure_aug_sep: org.apache.spark.sql.DataFrame = [DateTime: timestamp, Pressure: int]\n\ntemp_feb_jun: org.apache.spark.sql.DataFrame = [DateTime: timestamp, Temperature: int]\n\ntemp_aug_sep: org.apache.spark.sql.DataFrame = [DateTime: timestamp, Temperature: int]\n\nwinddirection_feb_jun: org.apache.spark.sql.DataFrame = [DateTime: timestamp, WindDirection: int]\n\nwinddirection_aug_sep: org.apache.spark.sql.DataFrame = [DateTime: timestamp, WindDirection: int]\n\nwindspeed_feb_jun: org.apache.spark.sql.DataFrame = [DateTime: timestamp, WindSpeed: double]\n\nwindspeed_aug_sep: org.apache.spark.sql.DataFrame = [DateTime: timestamp, WindSpeed: double]\n"},"dateCreated":"2017-01-27T11:56:55-0500","dateStarted":"2017-01-29T16:16:31-0500","dateFinished":"2017-01-29T16:16:38-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2967","focus":true},{"text":"//let us verify the datatype of each variable\ndewpoint_feb_jun.printSchema()\ndewpoint_aug_sep.printSchema()\n\nhumidity_feb_jun.printSchema()\nhumidity_aug_sep.printSchema()\n\npressure_feb_jun.printSchema()\npressure_aug_sep.printSchema()\n\ntemp_feb_jun.printSchema()\ntemp_aug_sep.printSchema()\n\nwinddirection_feb_jun.printSchema()\nwinddirection_aug_sep.printSchema()\n\nwindspeed_feb_jun.printSchema()\nwindspeed_aug_sep.printSchema()\n","dateUpdated":"2017-01-29T16:16:46-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485580595023_-257745268","id":"20170128-001635_2055888850","result":{"code":"SUCCESS","type":"TEXT","msg":"root\n |-- DateTime: timestamp (nullable = true)\n |-- DewPoint: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- DewPoint: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- Humidity: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- Humidity: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- Pressure: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- Pressure: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- Temperature: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- Temperature: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- WindDirection: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- WindDirection: integer (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- WindSpeed: double (nullable = true)\n\r\nroot\n |-- DateTime: timestamp (nullable = true)\n |-- WindSpeed: double (nullable = true)\n\r\n"},"dateCreated":"2017-01-28T12:16:35-0500","dateStarted":"2017-01-29T16:16:46-0500","dateFinished":"2017-01-29T16:16:50-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2968","focus":true},{"text":"//create temp table of each weather data, data frame\ndewpoint_feb_jun.registerTempTable(\"dewpoint_feb_jun\");\ndewpoint_aug_sep.registerTempTable(\"dewpoint_feb_jun\");\n\nhumidity_feb_jun.registerTempTable(\"humidity_feb_jun\");\nhumidity_aug_sep.registerTempTable(\"humidity_aug_sep\");\n\npressure_feb_jun.registerTempTable(\"pressure_feb_jun\");\npressure_aug_sep.registerTempTable(\"pressure_aug_sep\");\n\ntemp_feb_jun.registerTempTable(\"temp_feb_jun\");\ntemp_aug_sep.registerTempTable(\"temp_aug_sep\");\n\nwinddirection_feb_jun.registerTempTable(\"winddirection_feb_jun\");\nwinddirection_aug_sep.registerTempTable(\"winddirection_aug_sep\");\n\nwindspeed_feb_jun.registerTempTable(\"windspeed_feb_jun\");\nwindspeed_aug_sep.registerTempTable(\"windspeed_aug_sep\");","dateUpdated":"2017-01-29T16:17:06-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485618934968_2081656848","id":"20170128-105534_1861478771","result":{"code":"SUCCESS","type":"TEXT","msg":"\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"},"dateCreated":"2017-01-28T10:55:34-0500","dateStarted":"2017-01-29T16:17:06-0500","dateFinished":"2017-01-29T16:17:18-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2969","focus":true},{"text":"%sql\n/*find minimum,maximum and average values of dewpoint*/\nselect min(Dewpoint) as minimumValue,max(Dewpoint) as maximuValue, avg(Dewpoint) averagevalue from dewpoint_feb_jun","dateUpdated":"2017-01-29T16:22:09-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"minimumValue","index":0,"aggr":"sum"}],"values":[{"name":"maximuValue","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"minimumValue","index":0,"aggr":"sum"},"yAxis":{"name":"maximuValue","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485620923934_770266199","id":"20170128-112843_1312149679","result":{"code":"SUCCESS","type":"TABLE","msg":"minimumValue\tmaximuValue\taveragevalue\n0\t19\t10.355371900826446\n","comment":"","msgTable":[[{"key":"maximuValue","value":"0"},{"key":"maximuValue","value":"19"},{"key":"maximuValue","value":"10.355371900826446"}]],"columnNames":[{"name":"minimumValue","index":0,"aggr":"sum"},{"name":"maximuValue","index":1,"aggr":"sum"},{"name":"averagevalue","index":2,"aggr":"sum"}],"rows":[["0","19","10.355371900826446"]]},"dateCreated":"2017-01-28T11:28:43-0500","dateStarted":"2017-01-29T16:22:09-0500","dateFinished":"2017-01-29T16:22:10-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2970","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485724866708_435969583","id":"20170129-162106_876619457","dateCreated":"2017-01-29T16:21:06-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3567","text":"%sql\n/*find minimum,maximum and average values of humidity*/\nselect min(humidity) as minimumValue,max(humidity) as maximuValue, avg(humidity) averagevalue from humidity_feb_jun","dateUpdated":"2017-01-29T16:23:39-0500","dateFinished":"2017-01-29T16:23:39-0500","dateStarted":"2017-01-29T16:23:39-0500","result":{"code":"SUCCESS","type":"TABLE","msg":"minimumValue\tmaximuValue\taveragevalue\n12\t100\t71.15791397587425\n","comment":"","msgTable":[[{"key":"maximuValue","value":"12"},{"key":"maximuValue","value":"100"},{"key":"maximuValue","value":"71.15791397587425"}]],"columnNames":[{"name":"minimumValue","index":0,"aggr":"sum"},{"name":"maximuValue","index":1,"aggr":"sum"},{"name":"averagevalue","index":2,"aggr":"sum"}],"rows":[["12","100","71.15791397587425"]]}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485725030875_-179431088","id":"20170129-162350_1684928197","dateCreated":"2017-01-29T16:23:50-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3714","text":"%sql\n/*find minimum,maximum and average values of pressure*/\nselect min(pressure) as minimumValue,max(pressure) as maximuValue, avg(pressure) averagevalue from pressure_feb_jun","dateUpdated":"2017-01-29T16:24:55-0500","dateFinished":"2017-01-29T16:24:55-0500","dateStarted":"2017-01-29T16:24:55-0500","result":{"code":"SUCCESS","type":"TABLE","msg":"minimumValue\tmaximuValue\taveragevalue\n986\t1038\t1013.6380592466171\n","comment":"","msgTable":[[{"key":"maximuValue","value":"986"},{"key":"maximuValue","value":"1038"},{"key":"maximuValue","value":"1013.6380592466171"}]],"columnNames":[{"name":"minimumValue","index":0,"aggr":"sum"},{"name":"maximuValue","index":1,"aggr":"sum"},{"name":"averagevalue","index":2,"aggr":"sum"}],"rows":[["986","1038","1013.6380592466171"]]}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485725109212_-1332768728","id":"20170129-162509_1082839102","dateCreated":"2017-01-29T16:25:09-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3813","text":"%sql\n/*find minimum,maximum and average values of temperature*/\nselect min(temperature) as minimumValue,max(temperature) as maximuValue, avg(temperature) averagevalue from temp_feb_jun","dateUpdated":"2017-01-29T16:26:10-0500","dateFinished":"2017-01-29T16:26:10-0500","dateStarted":"2017-01-29T16:26:10-0500","result":{"code":"SUCCESS","type":"TABLE","msg":"minimumValue\tmaximuValue\taveragevalue\n-3\t25\t9.061167296210552\n","comment":"","msgTable":[[{"key":"maximuValue","value":"-3"},{"key":"maximuValue","value":"25"},{"key":"maximuValue","value":"9.061167296210552"}]],"columnNames":[{"name":"minimumValue","index":0,"aggr":"sum"},{"name":"maximuValue","index":1,"aggr":"sum"},{"name":"averagevalue","index":2,"aggr":"sum"}],"rows":[["-3","25","9.061167296210552"]]}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485725315886_-387562751","id":"20170129-162835_395674180","dateCreated":"2017-01-29T16:28:35-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3912","text":"%sql\n/*find minimum,maximum and average values of winddirection*/\nselect min(winddirection) as minimumValue,max(winddirection) as maximuValue, avg(winddirection) averagevalue from winddirection_feb_jun\n","dateUpdated":"2017-01-29T16:29:51-0500","dateFinished":"2017-01-29T16:29:52-0500","dateStarted":"2017-01-29T16:29:51-0500","result":{"code":"SUCCESS","type":"TABLE","msg":"minimumValue\tmaximuValue\taveragevalue\n0\t360\t182.43186840166953\n","comment":"","msgTable":[[{"key":"maximuValue","value":"0"},{"key":"maximuValue","value":"360"},{"key":"maximuValue","value":"182.43186840166953"}]],"columnNames":[{"name":"minimumValue","index":0,"aggr":"sum"},{"name":"maximuValue","index":1,"aggr":"sum"},{"name":"averagevalue","index":2,"aggr":"sum"}],"rows":[["0","360","182.43186840166953"]]}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"minimumValue","index":0,"aggr":"sum"}],"values":[{"name":"maximuValue","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"minimumValue","index":0,"aggr":"sum"},"yAxis":{"name":"maximuValue","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485725400131_1828144868","id":"20170129-163000_1325324109","dateCreated":"2017-01-29T16:30:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4000","text":"%sql\n/*find minimum,maximum and average values of windspeed*/\nselect min(windspeed) as minimumValue,max(windspeed) as maximuValue, avg(windspeed) averagevalue from windspeed_feb_jun\n","dateUpdated":"2017-01-29T16:31:19-0500","dateFinished":"2017-01-29T16:31:05-0500","dateStarted":"2017-01-29T16:31:04-0500","result":{"code":"SUCCESS","type":"TABLE","msg":"minimumValue\tmaximuValue\taveragevalue\n-9999.0\t64.8\t11.953700305810354\n","comment":"","msgTable":[[{"key":"maximuValue","value":"-9999.0"},{"key":"maximuValue","value":"64.8"},{"key":"maximuValue","value":"11.953700305810354"}]],"columnNames":[{"name":"minimumValue","index":0,"aggr":"sum"},{"name":"maximuValue","index":1,"aggr":"sum"},{"name":"averagevalue","index":2,"aggr":"sum"}],"rows":[["-9999.0","64.8","11.953700305810354"]]}},{"text":"","dateUpdated":"2017-01-29T16:31:52-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485580633538_-483715466","id":"20170128-001713_33063671","dateCreated":"2017-01-28T12:17:13-0500","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2971"}],"name":"FinalProject_WeatherData","id":"2CAHFSERE","angularObjects":{"2C9QJ3RQ4:shared_process":[],"2C83S4RT5:shared_process":[],"2C77Q4486:shared_process":[],"2C6GBY67S:shared_process":[],"2C96JZFWR:shared_process":[],"2C8EVRFQ7:shared_process":[],"2C9TS8DUR:shared_process":[],"2C9DE472G:shared_process":[],"2C6Z93G3W:shared_process":[],"2C7W23H2N:shared_process":[],"2C6S664H3:shared_process":[],"2C9Y6MGD6:shared_process":[],"2CA8HNVWP:shared_process":[],"2C6H3QQ21:shared_process":[],"2C9QEZCD2:shared_process":[],"2C7BR678C:shared_process":[],"2C7U3ZCZZ:shared_process":[],"2C9NRT743:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}